// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// update_beta
List update_beta(int t, arma::vec nr_par, arma::vec epsilon_vec, arma::vec epsilon2_vec, arma::vec leap_vec, int nc, double omega, arma::vec cbeta_prior, arma::vec beta, arma::vec tau_yes, arma::vec tau_no, arma::vec kappa, arma::mat ymat);
RcppExport SEXP _SLFM1D_update_beta(SEXP tSEXP, SEXP nr_parSEXP, SEXP epsilon_vecSEXP, SEXP epsilon2_vecSEXP, SEXP leap_vecSEXP, SEXP ncSEXP, SEXP omegaSEXP, SEXP cbeta_priorSEXP, SEXP betaSEXP, SEXP tau_yesSEXP, SEXP tau_noSEXP, SEXP kappaSEXP, SEXP ymatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nr_par(nr_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type epsilon_vec(epsilon_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type epsilon2_vec(epsilon2_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type leap_vec(leap_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cbeta_prior(cbeta_priorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_yes(tau_yesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_no(tau_noSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta(t, nr_par, epsilon_vec, epsilon2_vec, leap_vec, nc, omega, cbeta_prior, beta, tau_yes, tau_no, kappa, ymat));
    return rcpp_result_gen;
END_RCPP
}
// update_tau_yes
List update_tau_yes(int t, arma::vec nc_par, arma::vec epsilon_vec, arma::vec epsilon2_vec, arma::vec leap_vec, int nr, arma::vec beta, arma::vec tau_yes, arma::vec tau_no, arma::vec kappa, arma::mat ymat);
RcppExport SEXP _SLFM1D_update_tau_yes(SEXP tSEXP, SEXP nc_parSEXP, SEXP epsilon_vecSEXP, SEXP epsilon2_vecSEXP, SEXP leap_vecSEXP, SEXP nrSEXP, SEXP betaSEXP, SEXP tau_yesSEXP, SEXP tau_noSEXP, SEXP kappaSEXP, SEXP ymatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nc_par(nc_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type epsilon_vec(epsilon_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type epsilon2_vec(epsilon2_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type leap_vec(leap_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_yes(tau_yesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_no(tau_noSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    rcpp_result_gen = Rcpp::wrap(update_tau_yes(t, nc_par, epsilon_vec, epsilon2_vec, leap_vec, nr, beta, tau_yes, tau_no, kappa, ymat));
    return rcpp_result_gen;
END_RCPP
}
// update_tau_no
List update_tau_no(int t, arma::vec nc_par, arma::vec epsilon_vec, arma::vec epsilon2_vec, arma::vec leap_vec, int nr, arma::vec beta, arma::vec yes_out, arma::vec tau_no, arma::vec kappa, arma::mat ymat);
RcppExport SEXP _SLFM1D_update_tau_no(SEXP tSEXP, SEXP nc_parSEXP, SEXP epsilon_vecSEXP, SEXP epsilon2_vecSEXP, SEXP leap_vecSEXP, SEXP nrSEXP, SEXP betaSEXP, SEXP yes_outSEXP, SEXP tau_noSEXP, SEXP kappaSEXP, SEXP ymatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nc_par(nc_parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type epsilon_vec(epsilon_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type epsilon2_vec(epsilon2_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type leap_vec(leap_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yes_out(yes_outSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_no(tau_noSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    rcpp_result_gen = Rcpp::wrap(update_tau_no(t, nc_par, epsilon_vec, epsilon2_vec, leap_vec, nr, beta, yes_out, tau_no, kappa, ymat));
    return rcpp_result_gen;
END_RCPP
}
// update_omega
List update_omega(double omega, arma::vec beta, int nr, double a, double b, double omega_sd);
RcppExport SEXP _SLFM1D_update_omega(SEXP omegaSEXP, SEXP betaSEXP, SEXP nrSEXP, SEXP aSEXP, SEXP bSEXP, SEXP omega_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type omega_sd(omega_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(update_omega(omega, beta, nr, a, b, omega_sd));
    return rcpp_result_gen;
END_RCPP
}
// update_kappa
List update_kappa(int t, arma::vec nc_par, int nr, arma::vec beta, arma::vec yes_out, arma::vec no_out, arma::vec kappa, arma::mat ymat, double kappa_a, double ccc, arma::vec t_sig_vec);
RcppExport SEXP _SLFM1D_update_kappa(SEXP tSEXP, SEXP nc_parSEXP, SEXP nrSEXP, SEXP betaSEXP, SEXP yes_outSEXP, SEXP no_outSEXP, SEXP kappaSEXP, SEXP ymatSEXP, SEXP kappa_aSEXP, SEXP cccSEXP, SEXP t_sig_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nc_par(nc_parSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yes_out(yes_outSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type no_out(no_outSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< double >::type kappa_a(kappa_aSEXP);
    Rcpp::traits::input_parameter< double >::type ccc(cccSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t_sig_vec(t_sig_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(update_kappa(t, nc_par, nr, beta, yes_out, no_out, kappa, ymat, kappa_a, ccc, t_sig_vec));
    return rcpp_result_gen;
END_RCPP
}
// waic_cpp
List waic_cpp(int t, arma::vec nc_par, int nr, arma::vec beta, arma::vec tau_yes, arma::vec tau_no, arma::vec kappa, arma::mat ymat);
RcppExport SEXP _SLFM1D_waic_cpp(SEXP tSEXP, SEXP nc_parSEXP, SEXP nrSEXP, SEXP betaSEXP, SEXP tau_yesSEXP, SEXP tau_noSEXP, SEXP kappaSEXP, SEXP ymatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nc_par(nc_parSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_yes(tau_yesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_no(tau_noSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    rcpp_result_gen = Rcpp::wrap(waic_cpp(t, nc_par, nr, beta, tau_yes, tau_no, kappa, ymat));
    return rcpp_result_gen;
END_RCPP
}
// predict
arma::mat predict(int t, arma::vec nc_par, int nr, arma::vec beta, arma::vec tau_yes, arma::vec tau_no, arma::vec kappa, arma::mat ymat);
RcppExport SEXP _SLFM1D_predict(SEXP tSEXP, SEXP nc_parSEXP, SEXP nrSEXP, SEXP betaSEXP, SEXP tau_yesSEXP, SEXP tau_noSEXP, SEXP kappaSEXP, SEXP ymatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nc_par(nc_parSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_yes(tau_yesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_no(tau_noSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(t, nc_par, nr, beta, tau_yes, tau_no, kappa, ymat));
    return rcpp_result_gen;
END_RCPP
}
// impute_NA
arma::mat impute_NA(arma::uvec na, arma::uvec i_index, arma::uvec j_index, arma::mat ymat, arma::vec tau_yes, arma::vec tau_no, arma::vec beta, arma::vec kappa, const int n);
RcppExport SEXP _SLFM1D_impute_NA(SEXP naSEXP, SEXP i_indexSEXP, SEXP j_indexSEXP, SEXP ymatSEXP, SEXP tau_yesSEXP, SEXP tau_noSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type na(naSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type j_index(j_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_yes(tau_yesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau_no(tau_noSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_NA(na, i_index, j_index, ymat, tau_yes, tau_no, beta, kappa, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SLFM1D_update_beta", (DL_FUNC) &_SLFM1D_update_beta, 13},
    {"_SLFM1D_update_tau_yes", (DL_FUNC) &_SLFM1D_update_tau_yes, 11},
    {"_SLFM1D_update_tau_no", (DL_FUNC) &_SLFM1D_update_tau_no, 11},
    {"_SLFM1D_update_omega", (DL_FUNC) &_SLFM1D_update_omega, 6},
    {"_SLFM1D_update_kappa", (DL_FUNC) &_SLFM1D_update_kappa, 11},
    {"_SLFM1D_waic_cpp", (DL_FUNC) &_SLFM1D_waic_cpp, 8},
    {"_SLFM1D_predict", (DL_FUNC) &_SLFM1D_predict, 8},
    {"_SLFM1D_impute_NA", (DL_FUNC) &_SLFM1D_impute_NA, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_SLFM1D(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
